{"version":3,"sources":["context/OrderContext.js","Header.js","Product.js","ProductList.js","App.js","serviceWorker.js","index.js"],"names":["createContext","orders","addOrder","Provider","Consumer","Header","react_default","a","createElement","value","concat","length","Product","_ref","id","name","onClick","products","ProductList","map","product","src_Product","Object","assign","key","App","state","order","_this","setState","toConsumableArray","contextValue","this","src_Header","src_ProductList","Component","Boolean","window","location","hostname","match","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uKAEsCA,wBAAc,CAChDC,OAAQ,GACRC,SAAU,eAFCC,aAAUC,aCcVC,EAbA,WACX,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAACJ,EAAD,KACK,SAACK,GAAD,6BAAAC,OAAoBD,EAAMR,OAAOU,OAAjC,QAGTL,EAAAC,EAAAC,cAAA,aCOGI,EAfC,SAAAC,GAAkB,IAAfC,EAAeD,EAAfC,GAAIC,EAAWF,EAAXE,KACnB,OACIT,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,aAAQO,GACRT,EAAAC,EAAAC,cAACJ,EAAD,KACK,SAACK,GAAD,OACGH,EAAAC,EAAAC,cAAA,UACAQ,QAAS,kBAAMP,EAAMP,SAASY,KAD9B,SCNdG,EAAW,CACb,CAAEH,GAAI,EAAGC,KAAM,sBACf,CAAED,GAAI,EAAGC,KAAM,sBACf,CAAED,GAAI,EAAGC,KAAM,sBACf,CAAED,GAAI,EAAGC,KAAM,sBACf,CAAED,GAAI,EAAGC,KAAM,uBAgBJG,EAbK,WAChB,OACIZ,EAAAC,EAAAC,cAAA,WACKS,EAASE,IAAI,SAACC,GAAD,OACVd,EAAAC,EAAAC,cAACa,EAADC,OAAAC,OAAA,GACQH,EADR,CAEII,IAAKJ,EAAQN,UCoBlBW,6MA/BXC,MAAQ,CACJzB,OAAQ,MAGZC,SAAW,SAACyB,GACRC,EAAKC,SAAS,CACV5B,OAAM,GAAAS,OAAAY,OAAAQ,EAAA,EAAAR,CAAMM,EAAKF,MAAMzB,QAAjB,CAAyB0B,IAC/BzB,SAAU0B,EAAK1B,oFAId,IAEC6B,EAAe,CACjB9B,OAFe+B,KAAKN,MAAhBzB,OAGJC,SAAU8B,KAAK9B,UAGnB,OACII,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACL,EAAD,CACIM,MAAOsB,GAEPzB,EAAAC,EAAAC,cAACyB,EAAD,MACA3B,EAAAC,EAAAC,cAAC0B,EAAD,eAzBFC,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,iBAAOnC,EAAAC,EAAAC,cAACkC,EAAD,MAASC,SAASC,eAAe,SD4HlC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a42e903d.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nexport const { Provider, Consumer } = createContext({\n    orders: [],\n    addOrder: () => {},\n});","import React from 'react';\nimport { Consumer } from './context/OrderContext';\n\nconst Header = () => {\n    return (\n        <div>\n            <span>\n                <Consumer>\n                    {(value) => (`購物車 (${value.orders.length})`)}\n                </Consumer>\n            </span>\n            <hr />\n        </div>\n    );\n}\n\nexport default Header;","import React from 'react';\nimport { Consumer } from './context/OrderContext';\n\nconst Product = ({ id, name }) => {\n    return (\n        <li>\n            <label>{name}</label>\n            <Consumer>\n                {(value) => (\n                    <button\n                    onClick={() => value.addOrder(id)}\n                    >+</button>\n                )}\n            </Consumer>\n        </li>\n    );\n}\n\nexport default Product;","import React from 'react';\nimport Product from './Product';\n\nconst products = [\n    { id: 1, name: '牛肉鍋' },\n    { id: 2, name: '豬肉鍋' },\n    { id: 3, name: '羊肉鍋' },\n    { id: 4, name: '雞肉鍋' },\n    { id: 5, name: '好肉鍋' }\n];\n\nconst ProductList = () => {\n    return (\n        <div>\n            {products.map((product) => (\n                <Product\n                    {...product}\n                    key={product.id}\n                />\n            ))}\n        </div>\n    );\n}\n\nexport default ProductList;","import React, { Component } from 'react';\nimport Header from './Header';\nimport ProductList from './ProductList';\nimport { Provider } from './context/OrderContext';\n\nclass App extends Component {\n    state = {\n        orders: [],\n    }\n\n    addOrder = (order) => {\n        this.setState({\n            orders: [...this.state.orders, order],\n            addOrder: this.addOrder\n        })\n    }\n\n    render() {\n        const { orders } = this.state;\n        const contextValue = {\n            orders,\n            addOrder: this.addOrder,\n        }\n        \n        return (\n            <div>\n                <Provider\n                    value={contextValue}\n                >\n                    <Header />\n                    <ProductList/>\n                </Provider>\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { render } from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nrender(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}